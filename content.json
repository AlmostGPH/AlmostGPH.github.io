{"meta":{"title":"Maybe_GPH's_Blog?","subtitle":"Yes it is","description":"","author":"PH Gao","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-12-15T08:04:46.952Z","updated":"2022-12-15T08:04:46.952Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"hittps_stupid_me","slug":"hittps-stupid-me","date":"2023-02-10T03:49:08.000Z","updated":"2023-02-10T08:06:42.558Z","comments":true,"path":"2023/02/10/hittps-stupid-me/","link":"","permalink":"http://example.com/2023/02/10/hittps-stupid-me/","excerpt":"","text":"记录我的愚蠢行为以及排查过程以及浅层理解https的保密原理 引子噩兆23年2月9日，我的平板终于回到了我的手中，百般喜悦地用了一下午，然后去造一顿汉堡王犒劳自己。 晚上回到家中，继续使用时去发现软件，游戏等不能登录，b站不能刷视频，却能看视频，太奇怪了！ 迷茫一开始我以为是网络的问题，总共试了3个wifi，都不行；以为是设置问题，恢复网络的出厂设置也不行。诡异的是，QQ能发消息，但看不见消息记录里的图片，能传文件，但稍微大一点的文件都不行，真是奇怪。于是我便准备洗漱，第二天去店里看看。 退路但是我转念一想，马上就要开学了，好不容易在开学前拿回来，我才不想又送去维修！于是便想看看能不能用线连从电脑传文件，如果能的话，至少不会影响我学习。 曙光连上电脑，只能查看DCIM，不能传文件进去。这时我很绝望，于是就随便看看DCIM里的照片，想找找安慰，结果我的照片有一个2022年4月的文件夹，那时我还没没买平板呢！打开一看，是我今天一些网络错误的截图，这就有趣了！ 真相大白为什么今天的截图会在2022年4月的文件夹里呢？原来是我更改了系统的时间，用来登录一些游戏。而时间一改，https就起作用了。经过学习后，我认为应该是在验证数字证书一块出现了错误，拒绝了访问，而由于不是所有地方都用的https，所以会出现有些地方能用有些地方不能用的情况。 一点点https保密原理来自知乎顾伊凡YGY，具体的加密算法还得等到之后课堂的学习。 如果在网上以明文传输，被人截获过后信息就泄露了。防人截获很难，所以我们可以给传输的信息加密，这样就算被截获别人也不知道是什么。 对称加密服务器生成一个密钥，以明文传给浏览器，浏览器用密钥将文件加密后再传输，服务器收到后再用密钥解密，不知道密钥的人无法解密。 问题来了，如果在一开始传输密钥时，密钥被截获了，那后来就没有秘密可言了。于是便有了非对称加密。 非对称加密非对称是指的加密和解密不用同样的密钥，一个叫公钥，一个叫私钥。公钥加密的东西只能用私钥解开，私钥加密的东西只能用公钥解开。 服务器将公钥传给浏览器，浏览器用公钥加密文件后传给服务器，服务器再用私钥解密，这样就保证了浏览器到服务器的数据安全。但是从服务器到浏览器使用私钥加密，用公钥解密，如果从一开始截获了传输的公钥，那么从服务器到浏览器这个方向的文件就没法保证安全。 改良版非对称加密既然普通的非对称加密能保证一个方向的数据安全，那如果来两个非对称加密是不是就能保证两个方向的安全呢？答案是是的（也许） 如果服务器生成一组公钥A和私钥A’，浏览器生成一组公钥B和私钥B’，然后彼此把自己的公钥传给对方，传输文件时再用对方的公钥加密，解密时用自己的私钥解密，这样解密用的密钥就都没传经历传输，就不会被截获，也就保证了安全。 但是实际上却并没用这种方案，为什么呢？先抛去可能出现的安全问题不谈，非对称加密非常耗时，而其在你实际使用时并不仅仅是一段传输，会有很多传输形成一条链来给你呈现内容，太耗时可不行。那我们想，对称加密没用这么耗时，哪能不呢将对称加密和非对称加密结合以做到又快又安全呢？答案是可以的。 对称与非对称结合设想一下，服务器生成一组公钥和私钥，将公钥传输给浏览器，浏览器临时生成一个用于对称加密的密钥X用公钥将其加密，再传输给服务器，服务器再用私钥解开密钥X这样浏览器和服务器就都拥有了密钥X而且这个密钥X没有被泄露，大功告成！ 但是，仍然不安全，为什么呢？这就要提到中间人攻击 中间人攻击我们知道，传输的数据还是会被挟持，只不过内容被加密了。在上面这个情境下，黑客先劫持到服务器发送的公钥，然后将浏览器收到额公钥改为自己的公钥H，当然黑客持有对应的私钥H’。这时浏览器糊里糊涂地用公钥H加密对称密钥X再发送，又被黑客劫持，黑客再用自己的私钥H’解出密钥X，然后用之前劫持的服务器的公钥将其加密，并传回给服务器，服务器是不知道黑客干了这些事的，于是便用解出来的密钥X与浏览器进行数据传输，以为自己很安全，但密钥X已经被泄露了。对于改良版非对称加密也是一样的道理，黑客只需要准备两组公钥私钥，充当中间人，服务器发来公钥A，收着，改为发自己的公钥H1给浏览器，浏览器发来公钥B，收着，改为自己的公钥H2发给服务器，服务器给浏览器传输数据，先用自己的私钥H1’解密，然后用公钥B加密再传给浏览器，这样就得到了服务器到浏览器的数据，从浏览器到服务器是一样的。所以还是不安全。 怎么解决呢？问题出在服务器的公钥被替换了，所以要保证浏览器接受的公钥是服务器传输的公钥，也就是要一个证明，于是就出现了“数字证书”与“数字签名”。 保证公钥没被替换数字证书就像身份证一样，由公安局颁发给我们，证明我们是谁。“数字证书”也由相应的权威机构颁发给网站，这个权威机构就是CA机构（Certificate Authority），由他们颁发证书给网站，证书里包含了网站信息，公钥信息。一开始就传输这个证书，这样就可以证明公钥没被篡改。那么有人会问：万一证书被篡改了怎么办？所以数字证书也需要一个防伪措施，而这就是“数字签名”。 数字签名为了生成数字签名，CA机构先生成自己的一组公钥与私钥，然后将网站的证书进行hash用以缩短长度，提高效率，接着用私钥加密签名后和证书一起组成数字证书。那浏览器如何验证真伪呢？收到数字证书后，得到明文和签名，将明文进行hash得到S，然后用CA机构的公钥对签名进行解密得到S’，如果证书没有被篡改，那么S和S’应该是相同的，如果不同就立即终止访问。这个时候可能有人问，CA机构的公钥哪里来？因为这是权威机构，所以说，他们的公钥在安装系统时或安装浏览器时就会预装这些权威机构的公钥。 而且数字证书是会更新的，这样就保证了数据传输的安全 这时回到我的经历，我修改了系统时间，而数字证书在制作时是与时间相关的，那么再验证数字证书这一步就会卡住。经我实验，只是把时间向前调几天，一两星期是没问题的，这说明调到的去年4月不在数字证书有效期内，于是便出现了那些诡异的情况。 每次传输数据都需要生成密钥不会很慢吗？会，所以浏览器生成密钥后服务器会将其储存起来，并给他一个session ID，这样下次这个浏览器再想访问时只需要附上相应的session ID就行了，大大提高了效率。 总结这次通过自己造成的问题简单学习了https的保密原理，还是很有收获的。 By the way 如果你因为各种原因修改了系统时间，请一定记住把它改回来，不然https就会早晚教你做人！","categories":[],"tags":[{"name":"daily","slug":"daily","permalink":"http://example.com/tags/daily/"},{"name":"https","slug":"https","permalink":"http://example.com/tags/https/"}]},{"title":"About_Hgame","slug":"About_Hgame","date":"2023-01-12T03:45:30.000Z","updated":"2023-01-14T14:28:12.330Z","comments":true,"path":"2023/01/12/About_Hgame/","link":"","permalink":"http://example.com/2023/01/12/About_Hgame/","excerpt":"","text":"Week 1e99p1ant_want_girlfriend下载下来是一张图片，题目中说了是CRC校验有问题，那么极有可能是高度和宽度被改了，修改高度即可 方法是在winhex中打开后修改下面标记位置，前四位是宽，后四位是高把高度改大后得到下图 hgame{e99p1ant_want_a_girlfriend_qq_524306184}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"}]},{"title":"About_HWS2023","slug":"About-HWS2023","date":"2023-01-09T04:15:32.000Z","updated":"2023-01-13T15:30:13.128Z","comments":true,"path":"2023/01/09/About-HWS2023/","link":"","permalink":"http://example.com/2023/01/09/About-HWS2023/","excerpt":"","text":"sound from somewhere文件下载下来是一个音频，稍微听一听发现是SSTV，于是用相应软件解码。 电脑端有两个软件MMSSTV和RXSSTV，使用方法是打开软件，切换至虚拟声卡，然后播放音频。 但是我电脑的虚拟声卡驱动有点问题，于是切换至手机解码，手机没用主动散热，杂音很小，直接外放即可。 这里使用的软件为Robot36，可在谷歌商店下载 得到flag flag{OuTer_Wilds}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"}]},{"title":"About_NepnepxCatCTF","slug":"About-NepnepxCatCTF","date":"2023-01-01T05:39:57.000Z","updated":"2023-01-13T15:30:09.901Z","comments":true,"path":"2023/01/01/About-NepnepxCatCTF/","link":"","permalink":"http://example.com/2023/01/01/About-NepnepxCatCTF/","excerpt":"","text":"看到群友在打，试试看看，还是挺有意思的 0x01 MeowMeow看起来就是一张非常正常的图片，于是用stegsolve打开看看File format和Lsb隐写，都没用 于是用winhex打开，前面很正常，拉到下面时感觉有些奇怪，坐远了后发现flag如下图 CatCTF{CAT_GOES_MEOW} 0x02 CatchCat题目提示GPS,打开文件后发现一堆类似于经纬度的数据，上网查询后发现是GPS信息，猜测大概是让我把轨迹画出来，七千多条数据肯定不能用手画了 于是找到了这个网站https://lbs.amap.com/demo/javascript-api/example/marker/replaying-historical-running-data 这是高德的一个开放平台，可以用于显示轨迹 于是用excel将GPS数据调整为平台可用的格式 替换掉平台中原有的三个数据lineArr，center，position，第一个是轨迹，后两个是起点和终点替换好后点击运行 得到flag CatCTF{GPS_M1ao} 0x03 Nepnep 祝你新年快乐啦！送分题，看视频即得","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"}]},{"title":"ADword-简单题","slug":"About-ADword","date":"2022-12-19T04:02:37.000Z","updated":"2023-02-08T07:48:13.143Z","comments":true,"path":"2022/12/19/About-ADword/","link":"","permalink":"http://example.com/2022/12/19/About-ADword/","excerpt":"","text":"0x01 删库跑路题目要求是恢复数据，提示有一款很强大的软件，我找到了winhex。 然后在恢复数据时错把选择文件夹的界面看成了不能恢复的意思，然后看了题解，与自己的操作一样，然后傻眼了 这告诉我要相信自己 qaq 0x02 凯撒大帝在培根里藏了什么 ABBABAABBAAAAABABABAABABBAAAAABAABBAAABAABBBABBAABABBABABAAABABBBAABAABABABBBAABBABAA 文件由A和B组成，一眼凯撒密码和培根密码的混合，网上找解密的网站即可 培根密码由两个符号组成，每五个符号表示一个字母 加密时，明文中的每个字母都会转换成一组五个英文字母。其转换依靠下表： 原字母 对应培根密码 原字母 对应培根密码 原字母 对应培根密码 原字母 对应培根密码 A&#x2F;a aaaaa H&#x2F;h aabbb O&#x2F;o abbba V&#x2F;v babab B&#x2F;b aaaab I&#x2F;i abaaa P&#x2F;p abbbb W&#x2F;w babba C&#x2F;c aaaba J&#x2F;j abaab Q&#x2F;q baaaa X&#x2F;x babbb D&#x2F;d aaabb K&#x2F;k ababa R&#x2F;r baaab Y&#x2F;y bbaaa E&#x2F;e aabaa L&#x2F;l ababb S&#x2F;s baaba Z&#x2F;z bbaab F&#x2F;f aabab M&#x2F;m abbaa T&#x2F;t baabb G&#x2F;g aabba N&#x2F;n abbab U&#x2F;u babaa 0x03 简单的base编码一堆乱码，猜测是进行了很多次base64，多次解码后得到 F#S&lt;YRa[$*x7,&gt;{F3DH5N&#x2F;3.5+J6WD%P841JRN_i51F1Z! 然后我就卡住了，看完wp后才知道含有#就有可能是base92编码 base家族特征base1616进制（0-9，A-F），没有“&#x3D;” base32（A-Z，2-7，&#x3D;）没有0，1 base64（A-Z，a-z，0-9，+&#x2F;（不同系统不同），&#x3D;） base85base36base58（64减去O，0，+，&#x2F;，I，i） base91（加上了符号） base92base620x04 来自银河的信号还是看的wp，但是这道题爆炸有意思，解题思路在题目：来自银河的信号 我们都知道，NASA在之前曾向太空发送了旅行者一号和二号两张黄金唱片送向太空，里面包含了一些音乐与图像，而图像是如何保存在音频中的呢？这里参考b站视频 而这道题正是借用了这个概念。运用MMSSTV将音频转化为图片得到 f7liavga{1M_0105n_cC@okmei_nFge!s} 已经很像flag了，而且正好隔一个字母就是flag，所以我们有理由相信这是栅栏解密 f 7 l i a v g a { 1 M _ 0 1 0 5 n _ c C @ o k m e i _ n F g e ! s } 连起来就是 flag{M00nc@ke_Fes7iva1_15_Coming!} 0x05 steg没有py这道题看的wp 首先看见标题为steg没有py,猜测是用stegpy解决，然后原比赛的提示是16位密码，文件名刚好16位，解出来后为 根据此文件可知是仿射密码 Linux下使用stegpy不太会配置，于是我直接复制源码，在vscode上运行。 stegpy使用方法stegpy可以将一段内容隐写到图片里 加密 stegpy 内容 图片位置 如果要加密码 stegpy 内容 图片位置 -p 然后输入密码 解密 stegpy 图片位置 如果有密码 stegpy 图片位置 -p 然后输入密码 解密后的文件在当前目录 关于用vscode运行将所有文件放在一个文件夹。然后新建.py文件，源码复制进去，然后在终端 pip3 install stegpy 安装依赖 然后就能在终端运行 0x06 看雪看雪看雪还是看的wp, 好菜啊 首先压缩包里只有一张图片，在使用stegpy和stegsolve后无果，猜测有其他文件被隐藏了。 用7-zip打开压缩包后发现另外4个文件分别是 这道题大量出现雪，猜测有snow隐写，CtrlV试一试 果然有大量空白符，于是用解密工具解出来后得到flag 关于NTFS数据流隐藏每个文件都有主文件流和非主文件流，主文件流能够直接看到；而非主文件流寄宿于主文件流中，无法直接读取，这个非主文件流就是NTFS交换数据流。 可用7-zip查看关于SNOW隐写工具网站以及详细介绍https://darkside.com.au/snow/ Snow隐写是一个用于隐藏文本文件中的消息的程序 在行尾附加制表符和空格，以及用于从包含隐藏消息的文件中提取消息。 制表符和空格对于大多数文本查看器是不可见的，这是Snow的隐写本质 使用方法将含有隐写内容的txt文件复制到含有工具的目录，在此目录打开终端 如需加密，则 snow -C -m “I am lying” -p “hello world” 原文件 输出文件 -m表示内容，-p表示设置密码 如需解密，则 snow -C -p “hello world” 目标文件 PS：实际使用中要在snow前加上.\\ ,暂时未找到原因 0x07 fakezip通过这道题学习到了一一个新概念：伪加密 意思是其实没加密，但是看起来加密了 为了做到这一点需要了解zip文件的组成： zip文件的组成 压缩源文件数据区，文件头标记为50 4B 03 04 压缩源文件目录区，头为50 4B 01 02 压缩源文件目结束标志，为50 4B 05 06 其中数据区和目录区文件头标记隔8位后为加密与否的标志，若均是00 00则为未加密 而伪加密则是利用这一点，直接更改加密标志让压缩包被打开始显示已加密，所以只需要改回去就行。 回到这个题 将压缩包在winhex中打开后，查找文件头标志发现加密标志果然不对， 改为00 00后打开得到 本题结束 0x08 Check压缩包打开是一张图片，用stegsolve发现存在lsb隐写用html编码解码解出flag 0x09 碎纸机11文件下载下来是一堆长条联想到题目是碎纸机，能想象到这些拼起来应该是一张图片 于是… 我就真的去拼了成品是这样：有点暗，经过调色后识别出来为 flag{You Can Repair A Picture From Splices Baesd On Entropy} 本题结束 才怪！ 这不对！怎么能用手拼？等到块数过多时根本不行！于是打开浏览器，学习了这种拼图题的一般做法： 需要用到两个工具 ImageMagick gaps ImageMagisk用来组合照片 gaps用来重组照片至正常 关于他们的使用跟着他们的官方说明就行 ImageMagick：https://github.com/ImageMagick/ImageMagick gaps：https://github.com/nemanja-m/gaps 0x0a Let_god_knows下载下来是一张图片：在Red plane 0发现二维码扫描二维码就行了 flag{Ok@y!G0d_know5_n0w} 0x0b 津门杯2021-m1下载下来是一张图片用Stegsolve打开，一眼感觉有用 1234ZmxhZ3ts NURHcUYxcFB6T2Iy TFU5MTlMTWFCWVM1 QjFHMDFGRH0= 然后我就卡住了，不知道该怎么用，尝试了凯撒密码，维吉尼亚密码，ASCII码偏移……都没用 最后看的wp才知道是base64编码得到flag flag{l5DGqF1pPzOb2LU919LMaBYS5B1G01FD} 0x0c 适合作为桌面下载下来是一张图片，直接丢进stegsolve，发现二维码扫描后得到一大段字符尝试用base16解码未果，于是把这一段丢进winhex发现有十分像flag的东西存在，特别是这一段十分像栅栏解密，但是答案并不是这个… 于是我卡住了，思考良久，最终看了wp 这个标志：说明它可能是python编译后的文件，所以我们需要反编译它，先将其保存为pyc文件，再使用这个软件，下载地址：https://sourceforge.net/projects/easypythondecompiler/使用方法很简单，就是文件拖进去就行反编译后发现一个函数，但没有调用，调用后得到flag 0x0d Aesop_secret下载下来是一个动图，感觉能拼成一张图片，于是用photoshop打开再显示每一个图层后得到然后用winhex打开动图，在文件最后发现一串看起来有意义的码上网搜索后发生是aes解密，需要密钥，联想到图片中的ISCC,经过两次aes解密后得到flag 0x0e Test-flag-please-ignore下载下来是一个不明文件，于是用winhex打开发现一段看似有意义的乱码乱码中出现了0-9，a-e，判断为base16编码，丢进网站就解开了 0x0f [中等] QR1下载下来是一张看似空白的图片，但是放大后有小像素点，仔细看整体组合起来是一个二维码，也正好对应了标题QR用windows自带的画图工具把二维码变明显扫描得到： flag{AHA_U_Kn0w_QR_c0d3_312468ed-ea59-4fe9-9cd2-b5e9d8b39498} 0x10 我们生活在南京-2下载下来是一段音频，题目中提到了CW,上网搜索后发现CW是以摩斯密码传递信息的方式，于是用Audacity打开音频，调至频谱图窄的为短码，宽的为长码，丢进解密网站解密后得到：按照题目要求稍作更改： flag{cwi54tr4diti0nm3th0d} 0x11 我们生活在南京-1下载下来是一段音频，听起来像倒放，将音频倒放后听到了一些单词，倒放的网站为https://audiotrimmer.com/cn/online-mp3-reverser/ 题目中说“他们用无线电中惯用的方法区分字符串中读音相近的字母。”于是上网搜索，发现为了区分读音相似的字母，无线电中会以下面单词来代替对应字母： 字母 对应单词 字母 对应单词 A ALPHA N NOVEMBER B BRAVO O OSCAR C CHARLIE P PAPA D DELTA Q QUEBEC E ECHO R ROMEO F FOXTROT S SIERRA G GOLF T TANGO H HOTEL U UNIFORM I INDIA V VICTOR J JULIET W WHISKY K KILO X X-RAY L LIMA Y YANKEE M MIKE Z ZULU 对应上表听音频得到flag flag{radiowavesacrosstime} PS:这道题答案给错了，官方wp中方法和我的完全吻合，但是答案却是给的“我们生活在南京-2”的答案 0x12 4433下载下来是一张图片，用stegsolve打开，在Red plane 1发现二维码扫描后得到 …–.—-…–.. 用摩斯密码直接解密解出来很奇怪，结合题目4433将密码分隔再进行解密得到 VYGUD 上交后提示错误，经过搜索，发现摩斯密码经常使用缩写，如该网站所示：https://www.docin.com/p-1607111065.html发现“VY”是指的“VERY”，但是“GUD”却没有所指，因读音相近，猜测是“GOOD”,连起来是“VERYGOOD”，上交成功 0x13 肥宅快乐题题目说打完游戏可得，于是就打完了游戏，游戏不长，得到以下对话: U1lDe0YzaVpoYWlfa3U0aWxlX1QxMTF9 看起来是加密了的，丢进CyberChef，解出flag PS：本来可以不用打游戏，但是现在支持swf文件播放的播放器太少了，potplayer和VLC都不支持了，干脆给他通关了 0x14 摩斯电码下载下来是一个音频，听起来像摩斯密码，用Audacity打开发现长短交错输入到网站解出flag flag{THESECRETWDFLAGISMORESCODE1SFUN} 0x15 3-2点开是一张动图，下载下来用PS调一调得到以下二维码：扫描后得到一大串文本： 03f30d0ab8c1aa596300000000000000000200000040000000732e0000006400006401006c00005a00006402005a01006403005a02006404008400005a03006405008400005a040064010053280600000069ffffffff4e7403000000637466733d0000003138362c39382c3138302c3135342c3133392c3139322c3131342c31342c3130322c3136382c34332c3133362c35322c3231382c38352c3130302c3433630200000004000000070000004300000073610000007400006a01007c0100830100016401007d02007838007c0000445d30007d03007c02007402007403007c03008301007400006a04006402006403008302004183010064040017377d0200711a00577c02006a05006404008301007d02007c02005328050000004e7400000000690000000069ff00000074010000002c2806000000740600000072616e646f6d740400000073656564740300000073747274030000006f7264740700000072616e64696e7474050000007374726970280400000074040000007374723174030000006b65797404000000737472327401000000632800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e633107000000730c00000000010d0106010d012e010f016302000000040000000700000043000000735d0000007400006a01007c0100830100016401007d02007843007c00006a0200640200830100445d32007d03007403007c03008301007d03007c02007404007c03007400006a050064030064040083020041830100377d0200712300577c02005328050000004e52010000005202000000690000000069ff000000280600000052030000005204000000740500000073706c69747403000000696e74740300000063687252070000002804000000520b000000520a00000052090000007401000000692800000000280000000073100000002f686f6d652f6374662f6262622e7079740500000066756e63320f000000730c00000000010d01060116010c01240128050000005203000000520a000000740400000073747272520d000000521200000028000000002800000000280000000073100000002f686f6d652f6374662f6262622e707974080000003c6d6f64756c653e0100000073080000000c02060106030908 写入winhex，看起来像python的输出文件进行反编译得到 再调用func2得到flag flag{U_r_Greatt!} PS：试了两个小时，怎么调用函数，用什么系统调用出来都是乱码，迫不得已看了wp，猜测是python生成随机数的算法变了 0x16 test.pyc下载下来是一个pyc文件，进行反编译，失败后得到：根据里面的‘base64’，乱码和等号，猜测是用base64加密了flag，把乱码组合起来得到 &#x3D;cWbihGfyMzNllzZ0cjZzMWN5cTM4YjYygTOycmNycWNyYmM1Ujf 先反向再base64得到再反向得到 gmbh|237e9g47f3c597186b2892g62g52f255~ 前面4个字母刚好和flag差一位，推测是ASCII码表偏移，用以下代码得到flag 123456c=&#x27;gmbh|237e9g47f3c597186b2892g62g52f255~&#x27;d=&#x27;&#x27;for i in range(0,len(c)): k = chr(ord(c[i])-1) d+=kprint(d) flag{126d8f36e2b486075a1781f51f41e144} 0x17 challenge_how_many_Vigenère步骤很清晰，先把得到的文本文件用维吉尼亚解密爆破出key和原文，爆破网站https://www.guballa.de/vigenere-solver看原文应该是爱丽丝梦游仙境，英文名Alice’s Adventures in Wonderland，用得到的key进行加密得到flag flag{osqjdcsvzjxfkoutsvdmoqcegnqc} 0x18 Hear-with-your-Eyes下载下来一个位未知文件，用winhex打开看到有sound.wav的字样，猜测有个wav文件直接改文件名不行，于是用winhex文件修复出一个压缩包含有soung.wav，结合标题猜测是频谱图写了东西，用Audacity打开得到flag PS：这里的flag直接交后面的字符串 0x19 What-is-this解压缩后是一个未知文件，用winhex打开看到有jpg的字样转手改文件名没用，于是恢复文件出一个压缩包，含有两张图片，全是密密麻麻的像素点，用PS稍做处理，及讲其中一张图片的白色部分消去再重叠得到以下： AZADI TOWER 0x1a glance-50点开是一张动图，隐约有字母飘过，打开PS稍作处理得到flag： TWCTF{Bliss by Charles O’Rear} 0x1b give_you_flag打开又是一张动图，闪过了一张二维码，于是用PS打开发现缺少三个角，给他补上后扫描得到flag flag{e7d478cf6b915f50ab1277f78502a2c5} 0x1c stegano点开是一个pdf文档，看到有水印想到可能藏在水印里，于是CtrlA+C+V到记事本果然在最后发现可疑文字，由B和A组成，首先想到培根密码发现不行，然后想到摩斯密码，转换成摩斯密码后解密得到flag： flag{1nv151bl3m3554g3} 0x1d 坚持60s下载下来是一个jar文件，是一个需要你坚持60秒的小游戏，懒得玩，直接用jd-gui打开，找到结束语直接提交不行，把花括号里的乱码用base64解码一下得到flag flag{DajiDali_JinwanChiji} 0x1e gif下载下来是一个gif文件，非常友好的给出了每一帧：发现是黑白相间的，猜测是摩斯密码，以白色为0黑色为1，翻译得到 01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101 用摩斯密码解密没得到有效信息，猜测是二进制，解得flag flag{FuN_giF} 0x1f 如来十三掌下载下来是一个word文件，打开是一段天书：想起来有一种加密叫做与佛伦禅，解密得到： MzkuM3gvMUAwnzuvn3cgozMlMTuvqzAenJchMUAeqzWenzEmLJW9 丢进Cyberchef后得到flag： flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab} 0x20 互相伤害!!!下载下来是一个未知文件，用winhex打开发现wireshark字样，判断是pcap文件，于是改后缀名，导出http对象：是很多图片：找到这一张;扫描后得到： U2FsdGVkX1+VpmdLwwhbyNU80MDlK+8t61sewce2qCVztitDMKpQ4fUl5nsAZOI7 bE9uL8lW&#x2F;KLfbs33aC1XXw&#x3D;&#x3D; base64解不出有用信息，上网查了发现这个U2Fs…是AES解密的特征，于是用AES解密：解出一段不知道有什么用的文字 668b13e0b0fc0944daf4c223b9831e49 斟酌良久，然后就看了wp 题目叫互相伤害!!!，所以再图片中找到一张这样的图片：不知道有什么用，binwalk一下出来一个压缩包要我输密码，于是联想到上面的668b13e0b0fc0944daf4c223b9831e49，输进去得到一张图片：扫描大的二维码得到以下文字： 扔下内衣真有一线生机？？？？交出内裤才有活路！！！！ 扫描小的二维码得到flag： flag{97d1-0867-2dc1-8926-144c-bc8a-4d4a-3758} PS：注意题目要求提交的是flag{}里面的，不用套上flag{} 补充：关于用AES解密和其密码，图片上是有提示的 小彩蛋：最后扫大二维码得到的扔下内衣真有一线生机？？？？交出内裤才有活路！！！！ 也有对应的图片，将那个图片binwalk也会出来一个压缩包，包里是一张二维码，扫出来还是 扔下内衣真有一线生机？？？？交出内裤才有活路！！！！，不知有何用意","categories":[],"tags":[{"name":"ADword","slug":"ADword","permalink":"http://example.com/tags/ADword/"}]},{"title":"About_Markdown","slug":"About_markdown/About_markdown","date":"2022-12-15T10:04:19.000Z","updated":"2023-02-10T07:22:35.273Z","comments":true,"path":"2022/12/15/About_markdown/About_markdown/","link":"","permalink":"http://example.com/2022/12/15/About_markdown/About_markdown/","excerpt":"","text":"关于Markdown的学习二级标题三级标题正文直接写。换了一行？x^2^ 换了一段 怎么强调？ 加粗 斜体 &#x2F;&#x2F;ctrl+i也可以转换斜体，+b转换加粗 横线删除 这是引用 这是分割线 &#x3D;&#x3D;这是标记&#x3D;&#x3D; 列表 列表 tab缩进，shift+tab回缩 哈哈哈 啦啦啦 图片浏览器引入图片是ctrl+alt+v这是蔚蓝 普通引入图片是将图片考到当前文件夹然后 比如： Latex$$\\lim_{x \\to \\infin}\\frac{sin(t)}{x}&#x3D;1$$ ctrl+m在一段文字中也可以插入 $ \\lim_{x \\to \\infin}\\frac{sin(t)}{x}&#x3D;1$ 公式 ctrl+m*2$$ $$ 表格中间加上竖线来表示某一列|比如 1 2 3 4 我 你 他 我们 新内容 自动 ？ ？ 靠右对齐 靠左对齐 居中对齐 自动 alt+shift+f格式化表格 1 2 3 &gt; 2 3 链接这是一个链接 markdown all in one快捷操作复制链接，选中文本，然后ctrl+v code123456789#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;hello markdown&quot;&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"why_can't","slug":"why-can-t","date":"2022-12-15T08:51:28.000Z","updated":"2022-12-15T08:52:24.601Z","comments":true,"path":"2022/12/15/why-can-t/","link":"","permalink":"http://example.com/2022/12/15/why-can-t/","excerpt":"","text":"why can’t i update?","categories":[],"tags":[]},{"title":"About_Hackergame","slug":"About-Hackergame","date":"2022-11-02T12:55:19.000Z","updated":"2022-12-15T10:07:40.813Z","comments":true,"path":"2022/11/02/About-Hackergame/","link":"","permalink":"http://example.com/2022/11/02/About-Hackergame/","excerpt":"","text":"又是一次心血来潮。要说当时风声呼啸，我眉头紧缩，紧盯着电脑屏幕，大脑疯狂运转，只为完成英语Presentation。这时，同学对Hackergame的讨论传来，于是我心想：英语展示还有3周准备时间，不如休息休息，打打Hackergame…结果一点也算不上休息。 纯新手啥也不会系列首先是签到题说实话，一开始我真的想把2022写出来，原因是第三个框我已经能熟练骗出2，最后一个也写出过5和7忽然，在我尝试多次后，无意间瞟到地址栏的a&#x3D;2027，于是心生一计，然后成功了。 然后是猫咪问答（什么都不会，只能按顺序）结果是只写出来三道，都是找日期的题。有两个太简单了不说了，最后一个关于网费的题我觉得很有意思，下面细说： 题目要求是一开始改为20元每月的日期，直接搜索后找到一篇调整通知。但是，通知中的新旧政策都是20元，说明还要找到更老的调整通知，在中科大官网中找到一篇的2003年的通知，至此本题结束。 HeiLang直说没做出来。推测要求是对数组进行正确赋值，然后没了。 旅行照片没做完，但是非常刺激。第一题图片信息不说了。第二题下面细说：首先猜测面前的圆形体育场为标志性建筑，直接百度搜索无果。放大后发现一个标志和一段标语“WECOME TO ZOZO?A?M? STADIUM”,搜索找到日本千叶海洋球场。看地图找附近的酒馆找到邮政编码。手机分辨率是从反光的摄像头样式找出来的。飞机确实没找到，看题解后发现自己没精确到秒，而且也没有找到合适的历史航线查找工具。 总结我终究是菜的qwq，希望能有以后吧","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"}]},{"title":"About_MoeCTF","slug":"About-MoeCTF","date":"2022-11-02T12:31:46.000Z","updated":"2022-12-15T08:22:57.877Z","comments":true,"path":"2022/11/02/About-MoeCTF/","link":"","permalink":"http://example.com/2022/11/02/About-MoeCTF/","excerpt":"","text":"确实是刚接触，也做不出什么题。 （忘了名字，总之是关于字母歌）要点是字母表倒着写 小小凯撒凯撒密码的简单应用，爆破就行。 凯撒变异了114514（笑）有两个要点，一个是按照114514向前对应字母；还有一个是26个小写和大写字母排在一起进行对应（大概是？） 凭记忆大概就是这些","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"}]},{"title":"First_of_all","slug":"First_of_all","date":"2022-11-02T11:31:54.000Z","updated":"2022-12-15T10:39:03.159Z","comments":true,"path":"2022/11/02/First_of_all/","link":"","permalink":"http://example.com/2022/11/02/First_of_all/","excerpt":"","text":"简单的说就是各种机缘巧合。机缘巧合来了山大网安，机缘巧合打了MoeCTF，真有意思！创建博客也很有意思，跟着B站的教程出了许多问题。红底醒目的FATAL，结果细看是yml文件里少了两个冒号；git要我输令牌，还不能CTRL c+v(感谢郑神让我认识到VScode的强大)；网络也出了好多好多好多(恼)问题(属于玄学)…总之Blog是搭好了。 该记录些东西了1234567891011⣿⣿⣿⣿⣿⣿⢟⣡⣴⣶⣶⣦⣌⡛⠟⣋⣩⣬⣭⣭⡛⢿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢰⣿⣿⠿⣛⣛⣙⣛⠻⢆⢻⣿⠿⠿⠿⣿⡄⠻⣿⣿⣿ ⣿⣿⣿⠃⢠⣿⣿⣶⣿⣿⡿⠿⢟⣛⣒⠐⠲⣶⡶⠿⠶⠶⠦⠄⠙⢿ ⣿⠋⣠⠄⣿⣿⣿⠟⡛⢅⣠⡵⡐⠲⣶⣶⣥⡠⣤⣵⠆⠄⠰⣦⣤⡀ ⠇⣰⣿⣼⣿⣿⣧⣤⡸⢿⣿⡀⠂⠁⣸⣿⣿⣿⣿⣇⠄⠈⢀⣿⣿⠿ ⣰⣿⣿⣿⣿⣿⣿⣿⣷⣤⣈⣙⠶⢾⠭⢉⣁⣴⢯⣭⣵⣶⠾⠓⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣉⣤⣴⣾⣿⣿⣦⣄⣤⣤⣄⠄⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠈⢿⣿⣿⣿⣿⣿⣿⡟⣰⣞⣛⡒⢒⠤⠦⢬⣉⣉⣉⣉⣉⣉⣉⡥⠴⠂⢸⠻⣿⣿⣿⣿⣏⠻⢌⣉⣉⣩⣉⡛⣛⠒⠶⠶⠶⠶⠶⠶⠶⠶⠂⣸⣿⣥⣈⠙⡻⠿⠿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⠿⠛⢉⣠⣶⣶⣿⣿ 前面的区域以后再来探索吧！没东西了,真的","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"Test","slug":"Test","date":"2022-11-01T14:08:01.000Z","updated":"2022-12-15T10:39:01.664Z","comments":true,"path":"2022/11/01/Test/","link":"","permalink":"http://example.com/2022/11/01/Test/","excerpt":"","text":"22年11月1日22：09首次创建文稿，心情略有忐忑。 那个男人镇楼123456789⠄⠄⠄⠄⠄⠄⢴⡶⣶⣶⣶⡒⣶⣶⣖⠢⡄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⢠⣿⣋⣿⣿⣉⣿⣿⣯⣧⡰⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⣿⣿⣹⣿⣿⣏⣿⣿⡗⣿⣿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠟⡛⣉⣭⣭⣭⠌⠛⡻⢿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠄⠄⣤⡌⣿⣷⣯⣭⣿⡆⣈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠄⢻⣿⣿⣿⣿⣿⣿⣿⣷⢛⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠄⠄⢻⣷⣽⣿⣿⣿⢿⠃⣼⣧⣀⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣛⣻⣿⠟⣀⡜⣻⢿⣿⣿⣶⣤⡀⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⠄⠄⠄⢠⣤⣀⣨⣥⣾⢟⣧⣿⠸⣿⣿⣿⣿⣿⣤⡀⠄⠄⠄","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}],"categories":[],"tags":[{"name":"daily","slug":"daily","permalink":"http://example.com/tags/daily/"},{"name":"https","slug":"https","permalink":"http://example.com/tags/https/"},{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"ADword","slug":"ADword","permalink":"http://example.com/tags/ADword/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}